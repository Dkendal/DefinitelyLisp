program = { SOI ~ NEWLINE* ~ statement* ~ NEWLINE* ~ EOI }

statement = _{ type_alias }

type_alias = {
    "type" ~ #name = ident ~
    ("(" ~ #parameters = type_parameters ~ ")")? ~ 
    "=" ~ #body = expr
}

type_parameters = { ident ~ ( "," ~ ident)* }

expr = { expr1 ~ ( infix ~ expr1)* }

expr1 = _{ prefix* ~ primary }

primary = _{
    if_expr
  | array
  | application
  | sub_expr
}

array = { sub_expr ~ (array_modifier)+ }

array_modifier = @{ "[]" }

application = { ident ~ "(" ~ #arguments = argument_list ~ ")" }

argument_list = { expr ~ ( "," ~ expr)* }

sub_expr = _{ term | "(" ~ expr ~ ")" }

prefix = _{ infer }

infer = @{ "?" }

infix = _{ union | intersection }

neg = _{ "-" }

union = @{ "|" }

intersection = @{ "&" }

term = _{
    top_type
  | bottom_type
  | number
  | undefined
  | primitive
  | null
  | literal_true
  | literal_false
  | template_string
  | string
  | ident
  | tuple
  | object_literal
}

tuple = { "[" ~ (expr ~ ("," ~ expr)*)? ~ "]" }

top_type = _{ any | unknown }

bottom_type = _{ never }

primitive = {
    type_string
  | type_boolean
  | type_number
}

object_literal = {
    "{" ~ ((object_property ~ ",")* ~ object_property ~ ","?)? ~ "}"
}

object_property = {
    (#readonly = readonly_modifier)? ~ #key = ident ~ (#optional = optional_modifier)? ~ ":" ~ #value = expr
}

if_expr = {
    "if" ~ #condition = extends_condition ~ "then" ~ #then = expr ~ ("else" ~ #else = expr)?
}

extends_condition = { extends_expr }

extends_expr = _{
    extends_prefix* ~ extends_primary ~ (extends_prefix* ~ extends_infix ~ extends_primary)*
}

extends_primary = _{
    expr
  | "(" ~ extends_expr ~ ")"
}

extends_prefix = _{ not }

extends_infix = _{
    extends
  | not_extends
  | equals
  | strict_equals
  | strict_not_equals
  | and
  | or
}

extends = @{ "<:" }

not_extends = @{ "!<:" }

equals = @{ "=" }

not_equals = @{ "!=" }

strict_equals = @{ "==" }

strict_not_equals = @{ "!==" }

and = @{ "and" }

or = @{ "or" }

not = @{ "not" }

any = @{ "any" }

unknown = @{ "unknown" }

never = @{ "never" }

type_string = @{ "string" }

type_boolean = @{ "boolean" }

type_number = @{ "number" }

undefined = @{ "undefined" }

null = @{ "null" }

literal_true = @{ "true" }

literal_false = @{ "false" }

readonly_modifier = @{ "readonly" }

optional_modifier = @{ "?" }

string = { double_quote_string | single_quote_string }

double_quote_string = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }

single_quote_string = @{ "'" ~ (!"'" ~ ANY)* ~ "'" }

template_string = @{ "`" ~ (!"`" ~ ANY)* ~ "`" }

ident = @{ !keyword ~ !(ASCII_DIGIT) ~ (ASCII_ALPHANUMERIC | "$" | "_")+ }

keyword = _{
    "any"
  | "class"
  | "else"
  | "extends"
  | "extends"
  | "false"
  | "function"
  | "infer"
  | "interface"
  | "never"
  | "null"
  | "then"
  | "true"
  | "type"
  | "undefined"
  | "unknown"
  | "void"
  | "number"
  | "string"
  | "boolean"
  | "symbol"
  | "keyof"
  | "typeof"
  | "in"
}

number = @{
    (neg ~ WHITESPACE*)? ~ !"_" ~ (ASCII_DIGIT | "_")+ ~ ("." ~ !"_" ~ (ASCII_DIGIT | "_")*)?
}

COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

WHITESPACE = _{ " " | "\t" | "\n" }
