program = { SOI ~ NEWLINE* ~ statement* ~ NEWLINE* ~ EOI }

statement = _{ type_alias }

type_alias = {
  "type" ~ s ~
  ident ~ s ~
  type_parameters ~ s ~
  "=" ~ s ~
  expr
}

type_parameters = { (ident ~ s)* }

expr = { expr1 ~ ( s ~ infix ~ s ~ expr1 )* }

expr1 = _{ prefix* ~ s ~ primary }

primary = _{
    if_expr
  | array
  | application
  | sub_expr
}

array = { sub_expr ~ (array_modifier)+ }

array_modifier = @{ "[]" }

application = { ident ~ (s ~ sub_expr)+ }

sub_expr = _{ term | "(" ~ expr ~ ")" }

prefix = _{ infer }

infer = @{ "?" }

infix = _{ union | intersection }

neg = _{ "-" }

union = @{ "|" }

intersection = @{ "&" }

term = _{
    top_type
  | bottom_type
  | number
  | undefined
  | primitive
  | null
  | literal_true
  | literal_false
  | template_string
  | string
  | ident
  | tuple
  | object_literal
}

tuple = { "[" ~ ( expr ~ ( "," ~ expr )* ) ? ~ "]" }

top_type = _{ any | unknown }

bottom_type = _{ never }

primitive = {
    type_string
  | type_boolean
  | type_number
}

object_literal = {
  "{" ~ s ~
  (
    (
      object_property ~ s ~
      "," ~ s
      )* ~
    object_property ~ s ~ ","?
  )? ~ s ~
  "}"
}

object_property = {
    (#readonly = readonly_modifier)? ~ s ~
    #key = ident ~ s ~
    (#optional = optional_modifier)? ~ s ~
    ":" ~ s ~
    #value = expr
}

if_expr = {
    "if" ~ s ~
    extends_condition ~ s ~
    "then" ~ s ~
    (
      expr ~ s ~
      "else" ~ s ~
      expr
    )?
}

extends_condition = { extends_expr }

extends_expr = _{
    extends_prefix* ~ s ~
    extends_primary ~ s ~
    (
      extends_prefix* ~ s ~
      extends_infix ~ s ~
      extends_primary ~ s
    )*
}

extends_primary = _{
    expr
  | "(" ~ extends_expr ~ ")"
}

extends_prefix = _{ not }

extends_infix = _{
    extends
  | not_extends
  | equals
  | strict_equals
  | strict_not_equals
  | and
  | or
}

not = @{ "!" }

extends = @{ "<:" }

not_extends = @{ "!<:" }

equals = @{ "=" }

not_equals = @{ "!=" }

strict_equals = @{ "==" }

strict_not_equals = @{ "!==" }

and = @{ "&&" }

or = @{ "||" }

any = @{ "any" }

unknown = @{ "unknown" }

never = @{ "never" }

type_string = @{ "string" }

type_boolean = @{ "boolean" }

type_number = @{ "number" }

undefined = @{ "undefined" }

null = @{ "null" }

literal_true = @{ "true" }

literal_false = @{ "false" }

readonly_modifier = @{ "readonly" }

optional_modifier = @{ "?" }

string = { double_quote_string | single_quote_string }

double_quote_string = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }

single_quote_string = @{ "'" ~ (!"'" ~ ANY)* ~ "'" }

template_string = @{ "`" ~ (!"`" ~ ANY)* ~ "`" }

ident = @{ !keyword ~ !(ASCII_DIGIT) ~ (ASCII_ALPHANUMERIC | "$" | "_")+ }

keyword = _{
    "any"
  | "class"
  | "else"
  | "extends"
  | "extends"
  | "false"
  | "function"
  | "infer"
  | "interface"
  | "never"
  | "null"
  | "then"
  | "true"
  | "type"
  | "undefined"
  | "unknown"
  | "void"
  | "number"
  | "string"
  | "boolean"
  | "symbol"
  | "keyof"
  | "typeof"
  | "in"
}


number = @{
    !"_" ~ (ASCII_DIGIT | "_")+ ~ ("." ~ !"_" ~ (ASCII_DIGIT ~ "_")*)?
}

// NewBlock = _{
// // The first line in the block
// PEEK_ALL ~ PUSH("  "+ | "\t"+) ~ statement ~
// // Subsequent lines in the block
// (PEEK_ALL ~ statement)* ~
// // Remove the last layer of indentation from the stack when
// exiting the block DROP
// }

s = _{ (ws | comment)* }

ws = _{
    NEWLINE
  | " "
  | "\t"
}

comment = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
