import { A, B, I, M, Union } from :ts-toolbelt

import { __ } from :.

import {
  __capture__,
  __kind__,
  any_,
  bigint_,
  boolean_,
  function_,
  number_,
  object_,
  rest_,
  string_,
  symbol_,
} from :./const

type True as 1

type ExtractSubcapture(T) as
  match T do
    M::Primitive | M::BuiltIn -> never,
    object -> T[ Exclude(keyof(T), keyof([]) | keyof({})) ],
  end

type PartialAssignment(K, V) as
  match V do
    never -> never,
    string ->
        map k in K do
            v
        end,
  end

type EmptyToNever(T) as
  if not ({} <: T) then
    T
  end

type Kind as
  :string
  | :number
  | :bigint
  | :boolean
  | :symbol
  | :object
  | :function
  | :any
  | :rest

export interface Hole(Type, Label)
defaults
  Type = any,
  Label = any
{
  T: Type,
  readonly [__kind__]: Label
}

export type HoleInnerType(T) as
  if T <: Hole(?U) then
    U
  else
    T
  end

export interface Capture(Name, Pattern)
defaults
  Name = any,
  Pattern = any,
where
  Name <: string,
  Pattern <: any,
{
  readonly [__capture__]: Name,
  readonly pattern: Pattern,
}

type CapturePattern(T) as
  if T <: Capture(any, ?Pattern) then
    Pattern
  else
    T
  end

type RecursiveExpandCapture(T) as
  if A::Equals(T, any) <: True then
    T
  else
    if T <: Hole | Capture then
      ExpandCapture(T)
    else
      if T <: Record(string, any) then
        map K in keyof(T) do
          ExpandCapture(T[K])
        end
      else
        never
      end
    end
  end

type RecursiveExpandCapture(T) as
  cond do
    A::Equals(T, any) <: True -> T,
    T <: Hole | Capture -> ExpandCapture(T),
    T <: Record(string, any) ->
        map K in keyof(T) do
          ExpandCapture(T[K])
        end
  end

export type ExpandCapture(T) as
  T
  |> HoleInnerType()
  |> CapturePattern()
  |> RecursiveExpandCapture()

type NeverToEmpty(T) as
  if [T] </: never then
    T
  end

type Explode(T) as T[keyof(T)]

export type RecursiveCollect(Node) as
  Node
  |> DoRecursiveCollect()
  |> NeverToEmpty()

type IsLeafNode(T) as
  B::Or(
    B::Not(A::Extends(T, Record(string, any))),
    B::Or(A::Extends(T, Hole), A::Equals(T, any))
  )

type WalkChildren(Node) as
  map Key in keyof(Node) do
    DoRecursiveCollect(Node[Key])
  end
  |> Explode()

type DoRecursiveCollect(Node) as
  if IfLeafNode(Node) </: True then
    if Node <: Capture(any, ?P) then
      Node | DoRecursiveCollect(P)
    else
      WalkChildren(Node)
    end
  end

type UnionizeCapture(T) as
  if T <: Capture(?K, ?V) then
    if K <: string then
      map k in K do
        V
      end
    end
  end

export type CaptureToEntry(T) as
  T
  |> UnionizeCapture()
  |> Union::Merge()

export type VariableCapture(T) as
  T
  |> RecursiveCollect()
  |> CaptureToEntry()
  |> ExpandCapture()

export type PatternHandler(Pattern) as
  (VariableCapture(Pattern)) => unknown
